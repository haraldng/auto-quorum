use std::collections::{HashMap, VecDeque};

use common::kv::{ClientId, CommandId, KVCommand};


type CommandKey = (ClientId, CommandId);

struct PendingRead {
    read_command: KVCommand,
    num_replies: usize,
    read_quorum_size: usize,
    max_accepted_idx: usize,
}

struct ReadyRead {
    read_command: KVCommand,
    read_idx: usize,
}

pub struct QuorumReader {
    pending_reads: HashMap<CommandKey, PendingRead>,
    ready_reads: VecDeque<ReadyRead>,
}

impl QuorumReader {
    pub fn new() -> Self {
        Self { pending_reads: HashMap::new(), ready_reads: VecDeque::new() }
    }

    pub fn new_read(&mut self, command: Command, read_quorum_size: usize, accepted_idx: usize) {
        let pending_read = PendingRead {
            read_command,
            num_replies: 1,
            read_quorum_size,
            max_accepted_idx: accepted_idx,
        };
        self.pending_reads
    }
}
